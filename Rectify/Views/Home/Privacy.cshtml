@using Rectify.Models.ViewModels
@model TicketingViewModel

@{
    ViewData["Title"] = "Privacy";
    Layout = "_Layout";
    var id = Model.User.Id;
}
<head>
    <link href="~/css/mobile.css" rel="stylesheet" asp-append-version="true" />
    <style>

        .btn-pink {
            color: #fff;
            background-color: #ff1493;
            border-color: #ff1493;
            border-radius: 0.25rem; /* Matches Bootstrap's default */
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
        }

            .btn-pink:hover {
                background-color: #e01384; /* Slightly darker pink */
                border-color: #e01384;
                color: #fff;
            }

            .btn-pink:active {
                transform: scale(0.95);
            }

        .nav-pills .btn-pink {
            border-radius: 50rem; /* pill shape */
            padding: 0.4rem 1rem;
            font-size: 0.95rem;
            background-color: #ff1493;
            color: white !important;
        }

            .nav-pills .btn-pink:hover {
                background-color: #e01384;
                color: white;
            }

        .btn-outline-pink {
            color: #ff1493;
            border: 2px solid #ff1493;
            background-color: transparent;
            border-radius: 0.25rem;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
        }

            .btn-outline-pink:hover {
                background-color: #ff1493;
                color: #fff;
                border-color: #ff1493;
            }

        .qr-btn {
            display: inline-block;
            width: 30px; /* Adjust the size */
            height: 30px; /* Adjust the size */
            border: 2px solid #ff1493; /* Pink border */
            border-radius: 0.25rem; /* Rounded corners like other buttons */
            transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
            text-align: center;
        }

            .qr-btn:hover {
                background-color: #fff; /* White background on hover */
                border-color: #ff1493; /* Pink border on hover */
            }

            .qr-btn img {
                width: 100%; /* Ensures image fits into the button */
                height: 100%; /* Ensures image fits into the button */
                object-fit: cover;
            }

        .sticky-header thead th {
            position: sticky;
            top: 0;
            background-color: #ff1493;
            color: white;
            z-index: 1; /* ensures the header is above body rows */
        }

    </style>
    <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">


</head>

@* Success Message *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@* Warning Message *@
@if (TempData["WarningMessage"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        @TempData["WarningMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@* Error Message *@
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container">
    <!-- Toggle Button -->
    <div class="mb-3">
        <button class="btn btn-secondary" type="button" onclick="toggleFilterPanel(this)">
            <i class="bi bi-funnel-fill me-2"></i> Show Filters
        </button>
    </div>

    <!-- Collapsible Filter Panel -->
    <div class="collapse" id="filterPanel">
        <div class="row mb-3">
            <div class="col-md-3">
                <label>Start Date:</label>
                <input type="date" id="startDate" class="form-control" />
            </div>
            <div class="col-md-3">
                <label>End Date:</label>
                <input type="date" id="endDate" class="form-control" />
            </div>
            <div class="col-md-3">
                <label>Sort by:</label>
                <select id="sortOrder" class="form-control">
                    <option value="asc">Oldest First</option>
                    <option value="desc">Newest First</option>
                </select>
            </div>
            <div class="col-md-3">
                <label>Status:</label>
                <div class="border rounded p-2">
                    <div class="form-check">
                        <input class="form-check-input status-filter" type="checkbox" value="Open" id="statusOpen" checked>
                        <label class="form-check-label" for="statusOpen">Open</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input status-filter" type="checkbox" value="Pending" id="statusPending" checked>
                        <label class="form-check-label" for="statusPending">Pending</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input status-filter" type="checkbox" value="Closed" id="statusClosed">
                        <label class="form-check-label" for="statusClosed">Closed</label>
                    </div>
                </div>
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button class="btn btn-primary w-100" onclick="applyTicketFilters()">
                    <i class="bi bi-funnel-fill me-2"></i> Filter
                </button>
            </div>
        </div>
    </div>

    <div style="max-height: calc(8 * 3.5rem); overflow-y: auto;">
        <table class="table table-bordered mb-0 sticky-header">
            <thead>
                <tr>
                    <th>Message ID</th>
                    @if (Model.ShowCompanyInfo)
                    {
                        <th>Company</th>
                        <th>Branch/Address</th>
                    }
                    <th class="d-none d-md-table-cell">Date</th>
                    <th>Status</th>
                    <th>Message</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="ticketTableBody">
                @foreach (var ticket in Model.Tickets)
                {
                    <tr>
                        <td>@ticket.TicketID</td>
                        @if (Model.ShowCompanyInfo)
                        {
                            <td>@ticket.CompanyName</td>
                            <td>@ticket.BranchAddress</td>
                        }
                        <td class="d-none d-md-table-cell">@ticket.DateOfMessage.ToShortDateString()</td>
                        <td>@ticket.Status</td>
                        <td>@ticket.Message</td>
                        <td>
                            <button class="btn btn-outline-pink btn-sm"
                                    onclick="openStatusModal('@ticket.TicketID', '@ticket.Status')">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>



</div>


<!-- QR Code Modal -->
<div class="modal fade" id="qrModal" tabindex="-1" aria-labelledby="qrModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center">
            <div class="modal-header">
                <h5 class="modal-title" id="qrModalLabel">Company QR Code</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <img id="qrCodeImage" src="" alt="QR Code" class="img-fluid" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline-pink" onclick="copyQrLink()">Copy Link</button>
                <button class="btn-outline-pink" id="saveQrBtn">Save Image</button>
                <button class="btn btn-outline-pink" id="printQrBtn">Print QR Code</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for selecting a company -->
<div class="modal fade" id="companySelectModal" tabindex="-1" aria-labelledby="companySelectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select a Company to Edit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="company-list">
                <!-- Company buttons will be inserted here -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="qrCompanySelectModal" tabindex="-1" aria-labelledby="qrCompanySelectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select a Company for QR Code</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="qr-company-list">
                <!-- QR company buttons will go here -->
            </div>
        </div>
    </div>
</div>

<!--Modal for Editing Status-->
<div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-controller="Home" asp-action="UpdateStatus">
                <div class="modal-header">
                    <h5 class="modal-title">Update Ticket Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Ticket ID:</strong> <span id="modalTicketId"></span></p>
                    <input type="hidden" name="ticketId" id="hiddenTicketId"/>

                    <label for="statusSelect" class="form-label">Status</label>
                    <select id="statusSelect" name="status" class="form-select" required>
                        <option value="Open">Open</option>
                        <option value="Pending">Pending</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-pink" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-pink">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>


<script>

    function copyQrLink() {
        if (qrEncodedUrl) {
            navigator.clipboard.writeText(qrEncodedUrl)
                .then(() => alert("Link copied to clipboard!"))
                .catch(err => console.error("Failed to copy link: ", err));
        }
    }

        function handleQrCodeCompanySelect(userId) {
        fetch(`/Home/GetUserCompanies?userId=${encodeURIComponent(userId)}`)
            .then(res => res.json())
            .then(companies => {
                if (companies.length === 1) {
                    loadQrCode(companies[0].id); // Directly load for the only company
                } else if (companies.length > 1) {
                    const container = document.getElementById("company-list");
                    container.innerHTML = "";

                    companies.forEach(company => {
                        const btn = document.createElement("button");
                        btn.className = "btn btn-outline-pink w-100 mb-2";
                        btn.innerText = `${company.companyName} - ${company.branchAddress}`;
                        btn.onclick = () => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById("companySelectModal"));
                            modal.hide();
                            loadQrCode(company.id);
                        };
                        container.appendChild(btn);
                    });

                    const modal = new bootstrap.Modal(document.getElementById("companySelectModal"));
                    modal.show();
                } else {
                    alert("No companies found for this user.");
                }
            })
            .catch(err => {
                console.error("Error fetching companies:", err);
                alert("Failed to load companies.");
            });
    }

            let currentCompanyId = null;

                function loadQrCode(companyId) {
                    currentCompanyId = companyId;  // store the selected company id
                    const baseUrl = window.location.origin;
                    qrEncodedUrl = `${baseUrl}/Feedback/ContactStep1?companyId=${encodeURIComponent(companyId)}`;

                    const img = document.getElementById("qrCodeImage");
                    img.src = `/Home/GenerateQrCode?companyId=${encodeURIComponent(companyId)}&t=${Date.now()}`;

                    const qrModal = new bootstrap.Modal(document.getElementById("qrModal"));
                    qrModal.show();
                }



        function handleEditCompany(userId) {
        fetch(`/Home/GetUserCompanies?userId=${encodeURIComponent(userId)}`)
            .then(res => res.json())
            .then(companies => {
                if (companies.length === 1) {
                    // Redirect directly if only one company
                    window.location.href = `/Home/EditCompanyDetails?companyID=${companies[0].id}`;
                } else if (companies.length > 1) {
                    const container = document.getElementById("company-list");
                    container.innerHTML = "";

                    companies.forEach(company => {
                        const btn = document.createElement("button");
                        btn.className = "btn btn-outline-pink w-100 mb-2";
                        btn.innerText = `${company.companyName} - ${company.branchAddress}`;
                        btn.onclick = () => {
                            window.location.href = `/Home/EditCompanyDetails?companyID=${company.id}`;
                        };
                        container.appendChild(btn);
                    });

                    const modal = new bootstrap.Modal(document.getElementById("companySelectModal"));
                    modal.show();
                } else {
                    alert("No companies found for this user.");
                }
            })
            .catch(err => {
                console.error("Error fetching companies:", err);
                alert("Failed to load companies.");
            });
        }

      function printQrCode() {
                if (!currentCompanyId) {
                    alert("No company selected for printing.");
                    return;
                }

                const iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.src = `/Home/PrintQRCode?companyId=${encodeURIComponent(currentCompanyId)}`;
                document.body.appendChild(iframe);
                iframe.onload = function () {
                    setTimeout(() => document.body.removeChild(iframe), 3000);
                };
            }

            document.getElementById("printQrBtn").addEventListener("click", printQrCode);


            function applyTicketFilters() {
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;
        const sortOrder = document.getElementById("sortOrder").value;

        const showCompanyInfo = @Model.ShowCompanyInfo.ToString().ToLower(); // Razor injects true/false

        const selectedStatuses = Array.from(document.querySelectorAll('.status-filter:checked'))
            .map(cb => cb.value);

        const statusParams = selectedStatuses.map(s => `statuses=${encodeURIComponent(s)}`).join('&');
        const url = `/Home/FilterTickets?startDate=${startDate}&endDate=${endDate}&sortOrder=${sortOrder}&${statusParams}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById("ticketTableBody");
                tbody.innerHTML = ""; // Clear table

                data.forEach(ticket => {
                    const row = document.createElement("tr");
                    const dateOnly = new Date(ticket.dateOfMessage).toLocaleDateString();

                    row.innerHTML = `
                        <td>${ticket.ticketID}</td>
                        ${showCompanyInfo ? `<td>${ticket.companyName || ''}</td><td>${ticket.branchAddress || ''}</td>` : ''}
                        <td class="d-none d-md-table-cell">${dateOnly}</td>
                        <td>${ticket.status}</td>
                        <td>${ticket.message}</td>
                        <td>
                            <button class="btn btn-outline-pink btn-sm"
                                    onclick="openStatusModal('${ticket.ticketID}', '${ticket.status}')">
                                Edit
                            </button>
                        </td>
                    `;

                    tbody.appendChild(row);
                });

                // Close the filter panel after applying
                const panel = document.getElementById('filterPanel');
                if (typeof bootstrap !== 'undefined' && bootstrap.Collapse) {
                    const bsCollapse = bootstrap.Collapse.getOrCreateInstance(panel);
                    bsCollapse.hide();
                } else {
                    panel.style.display = 'none';
                }

                // Reset toggle button text
                const toggleButton = document.querySelector('button[onclick^="toggleFilterPanel"]');
                if (toggleButton) {
                    toggleButton.innerHTML = `<i class="bi bi-funnel-fill me-2"></i> Show Filters`;
                }
            })
            .catch(error => {
                console.error("Error filtering tickets:", error);
            });
    }


    //status changing area
        let currentTicketId = null;
    let currentStatus = null;

    function openStatusModal(ticketId, status) {
        currentTicketId = ticketId;
        currentStatus = status;

        document.getElementById("modalTicketId").textContent = ticketId;
        document.getElementById("hiddenTicketId").value = ticketId;  // add this line

        const select = document.getElementById("statusSelect");
        select.value = status;

        const statusModal = new bootstrap.Modal(document.getElementById("statusModal"));
        statusModal.show();
    }

    // Auto-dismiss alerts after 5 seconds (5000ms)
        setTimeout(function () {
            let alerts = document.querySelectorAll('.alert-dismissible');
            alerts.forEach(function (alert) {
                let bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                bsAlert.close();
            });
        }, 5000);


        document.getElementById("saveQrBtn").addEventListener("click", function () {
            if (!currentCompanyId) {
                alert("No company selected.");
                return;
            }

            const url = `/Home/GenerateQrCodeWithText?companyId=${encodeURIComponent(currentCompanyId)}&download=true&t=${Date.now()}`;
            const fileName = `QRCode_${currentCompanyId}.png`;

            // Create a temporary link and simulate click
            const a = document.createElement("a");
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        });
    
        
        
    //mobile support
    window.addEventListener('DOMContentLoaded', function () {
        const isMobile = window.innerWidth <= 768;
        if (isMobile) {
            document.getElementById('ticketHeader')?.classList.add('mobile-stack');
        }
    });

        function toggleFilterPanel(button) {
        const panel = document.getElementById('filterPanel');

        if (typeof bootstrap !== 'undefined' && bootstrap.Collapse) {
            const bsCollapse = bootstrap.Collapse.getOrCreateInstance(panel);
            bsCollapse.toggle();

            // Remove any existing listeners to prevent duplicates
            panel.removeEventListener('shown.bs.collapse', panel._onShown);
            panel.removeEventListener('hidden.bs.collapse', panel._onHidden);

            // Define and attach new listeners
            panel._onShown = () => {
                button.innerHTML = `<i class="bi bi-funnel-fill me-2"></i> Hide Filters`;
            };
            panel._onHidden = () => {
                button.innerHTML = `<i class="bi bi-funnel-fill me-2"></i> Show Filters`;
            };

            panel.addEventListener('shown.bs.collapse', panel._onShown);
            panel.addEventListener('hidden.bs.collapse', panel._onHidden);
        } else {
            // Manual fallback
            const isHidden = panel.style.display === 'none' || panel.style.display === '';
            panel.style.display = isHidden ? 'block' : 'none';
            button.innerHTML = `<i class="bi bi-funnel-fill me-2"></i> ${isHidden ? 'Hide' : 'Show'} Filters`;
        }
    }


</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>